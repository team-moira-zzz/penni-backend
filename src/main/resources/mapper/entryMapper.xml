<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moira.pennibackend.domain.entry.mapper.EntryMapper">
    <!-- ========================================================================================================== -->
    <!-- 그룹 내에 존재하는 가계부 항목인지 확인 -->
    <select id="checkGroupEntry" resultType="java.lang.Integer">
        SELECT COUNT(id)
        FROM   "ACCOUNT_BOOK_ENTRY"
        WHERE  group_id = #{groupId} AND id = #{entryId}
    </select>

    <!-- ========================================================================================================== -->
    <!-- 가계부 항목 저장 -->
    <insert id="insertEntry" parameterType="com.moira.pennibackend.global.entity.AccountBookEntry">
        INSERT INTO "ACCOUNT_BOOK_ENTRY" (
               id
             , user_id
             , group_id
             , category_id
             , content
             , description
             , price
             , date
             , type
             , method
             , created_at
        )
        VALUES (
               #{id}
             , #{userId}
             , #{groupId}
             , #{categoryId}
             , #{content}
             , #{description}
             , #{price}
             , #{date}
             , #{type}
             , #{method}
             , NOW()
        )
    </insert>

    <!-- ========================================================================================================== -->
    <!-- 일별 가계부 항목 목록 조회 -->
    <select id="selectDailyEntryList" resultType="com.moira.pennibackend.domain.entry.dto.response.DailyEntryResponse">
        SELECT
               A.id
             , A.type
             , A.content
             , A.description
             , A.price
             , A.method
             , A.category_id AS categoryId
             , C.name        AS categoryName
             , A.user_id     AS userId
             , B.nickname    AS userNickname
        FROM   "ACCOUNT_BOOK_ENTRY" A
        /* INNER JOIN: USER 테이블 */
        INNER JOIN "USER" B
        ON B.id = A.user_id
        /* LEFT JOIN: ACCOUNT_BOOK_CATEGORY 테이블 */
        LEFT JOIN "ACCOUNT_BOOK_CATEGORY" C
        ON C.id = A.category_id AND C.group_id = #{groupId}
        /* 조건문 */
        WHERE A.group_id = #{groupId}
        AND   TO_CHAR(A.date, 'YYYYMMDD') = #{dateString}
        /* 정렬 */
        <choose>
            <when test="sort == 'OLDEST'">
                ORDER BY A.created_at DESC
            </when>
            <when test="sort == 'LATEST'">
                ORDER BY A.created_at ASC
            </when>
            <when test="sort == 'HIGH_PRICE'">
                ORDER BY A.price DESC
            </when>
            <when test="sort == 'LOW_PRICE'">
                ORDER BY A.price ASC
            </when>
        </choose>
    </select>

    <!-- ========================================================================================================== -->
    <!-- 일별 수입/지출 총합 조회 -->
    <select id="selectDailyEntryTotal" resultType="com.moira.pennibackend.domain.entry.dto.response.DailyEntryTotalResponse">
        SELECT
               COALESCE(SUM(CASE WHEN type = 'INCOME' THEN price ELSE 0 END), 0) AS totalIncome
             , COALESCE(SUM(CASE WHEN type = 'EXPENSE' THEN price ELSE 0 END), 0) AS totalExpense
        FROM "ACCOUNT_BOOK_ENTRY"
        WHERE group_id = #{groupId}
        AND TO_CHAR(date, 'YYYYMMDD') = #{dateString}
    </select>

    <!-- ========================================================================================================== -->
    <!-- 월별 수입/지출 총합 조회 -->
    <select id="selectMonthlyEntryTotal" resultType="com.moira.pennibackend.domain.entry.dto.response.MonthlyEntryTotalResponse">
        SELECT
               COALESCE(SUM(CASE WHEN type = 'INCOME' THEN price ELSE 0 END), 0) AS totalIncome
             , COALESCE(SUM(CASE WHEN type = 'EXPENSE' THEN price ELSE 0 END), 0) AS totalExpense
        FROM "ACCOUNT_BOOK_ENTRY"
        WHERE group_id = #{groupId} AND TO_CHAR(date, 'YYYYMM') = #{dateString}
    </select>

    <!-- ========================================================================================================== -->
    <!-- 가계부 항목 수정 -->
    <update id="updateEntry">
        UPDATE "ACCOUNT_BOOK_ENTRY"
        SET
               category_id = #{request.categoryId}
             , content     = #{request.content}
             , description = #{request.description}
             , price       = #{request.price}
             , type        = #{request.type}
             , method      = #{request.method}
        WHERE  id = #{entryId} AND group_id = #{groupId}
    </update>

    <!-- ========================================================================================================== -->
    <!-- 가계부 항목 식제 -->
    <delete id="deleteEntry">
        DELETE FROM "ACCOUNT_BOOK_ENTRY" WHERE id = #{entryId} AND group_id = #{groupId}
    </delete>
</mapper>